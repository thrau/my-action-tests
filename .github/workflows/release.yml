name: Release

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: "Release type"
        default: "patch"
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  release-localstack-ext:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v2

      - name: "Prepare git config"
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: "Compute release versions"
        id: compute-versions
        env:
          RELEASE_TYPE: ${{ inputs.releaseType }}
        run: |
          bin/release.sh github-outputs ${RELEASE_TYPE}
        # the github outputs are:
        # ::set-output name=current::${CURRENT_VER}
        # ::set-output name=release::${RELEASE_VER}
        # ::set-output name=develop::${DEVELOP_VER}
        # ::set-output name=boundary::${BOUNDARY_VER}

      - name: "Explain release steps"
        run: bin/release.sh explain-steps ${{ inputs.releaseType }}

      - name: "Prepare release version"
        env:
          release_ver: ${{ steps.compute-versions.outputs.release }}
        run: |
          sed -i -r "s/^__version__ = \"(.*)\"/__version__ = \"${release_ver}\"/" plugin/__init__.py

      - name: "Create release distribution"
        run: make dist

      - name: "Publish to pypi"
        run: echo "make upload"

      - name: "Commit release version"
        env:
          release_ver: ${{ steps.compute-versions.outputs.release }}
        run: |
          git add */__init__.py setup.cfg
          git commit -m "Release version ${release_ver}"
          git tag -a "v${release_ver}" -m "Release version ${release_ver}"
          echo "git push && git push --tags"

      - name: "Create GitHub release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release list

      - name: "Prepare next development iteration"
        env:
          ver: ${{ steps.compute-versions.outputs.develop }}
        run: |
          sed -i -r "s/^__version__ = \"(.*)\"/__version__ = \"${ver}\"/" plugin/__init__.py

      - name: "Commit next development version"
        run: |
          git add */__init__.py setup.cfg
          git commit -m "Prepare next development iteration"
          echo "git push"

      - name: "Git Log"
        run: |
          git log --oneline -n 4
          git show HEAD~1
          git show HEAD
