name: Release

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: "Release type"
        default: "patch"
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  release-localstack:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v2

      - name: "Prepare git config"
        run: |
          git config user.name "localstack[bot]"
          git config user.email "localstack-bot@users.noreply.github.com"

      - name: "Compute release versions"
        id: compute-versions
        run: bin/release-helper.sh github-outputs ${{ inputs.releaseType }}
        # the github outputs are:
        # ::set-output name=current::${CURRENT_VER}
        # ::set-output name=release::${RELEASE_VER}
        # ::set-output name=develop::${DEVELOP_VER}
        # ::set-output name=boundary::${BOUNDARY_VER}

      - name: "Explain release steps"
        run: bin/release-helper.sh explain-steps ${{ inputs.releaseType }}

      - name: "Modify files for release version"
        run: |
          bin/release-helper.sh set-ver ${{ steps.compute-versions.outputs.release }}
          bin/release-helper.sh set-dep-ver "localstack-ext" "==${{ steps.compute-versions.outputs.release }}"

      - name: "Create release distribution"
        run: make dist

      - name: "Publish to pypi"
        run: echo "make upload"

      - name: "Commit release version"
        env:
          release_ver: ${{ steps.compute-versions.outputs.release }}
        run: |
          git add */__init__.py setup.cfg
          git commit -m "release version ${release_ver}"
          git tag -a "v${release_ver}" -m "Release version ${release_ver}"
          git push && git push --tags

      - name: "Create GitHub release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          release_ver: ${{ steps.compute-versions.outputs.release }}
        run: gh release create "v${release_ver}" --generate-notes --draft

      - name: "Modify files for next development version"
        env:
          ver: ${{ steps.compute-versions.outputs.develop }}
        run: |
          bin/release-helper.sh set-ver ${{ steps.compute-versions.outputs.develop }}
          bin/release-helper.sh set-dep-ver "localstack-ext" ">=${{ steps.compute-versions.outputs.develop }},<${{ steps.compute-versions.outputs.boundary }}"

      - name: "Commit next development version"
        run: |
          git add */__init__.py setup.cfg
          git commit -m "prepare next development iteration"
          git push

      - name: "Git Log"
        run: |
          git log --oneline -n 4
          git show HEAD~1
          git show HEAD
